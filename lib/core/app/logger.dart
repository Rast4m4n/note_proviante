import 'package:flutter/material.dart';
import 'package:l/l.dart'; // –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import 'package:stack_trace/stack_trace.dart'; // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–µ–∫–∞ –≤—ã–∑–æ–≤–æ–≤

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ [LogLevel] –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –∫ —É—Ä–æ–≤–Ω—è–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
extension on LogLevel {
  String get emoji => maybeWhen(
    shout: () => '‚ùóÔ∏è', // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    error: () => 'üö´', // –û—à–∏–±–∫–∏
    warning: () => '‚ö†Ô∏è', // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    info: () => 'üí°', // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    debug: () => 'üêû', // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    orElse: () => '', // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  );
}

/// –ú–∏–∫—Å–∏–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫.
mixin Logger {
  /// –û–ø—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–∫–ª—é—á–∞—é—â–∏–µ —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –∏ –∑–∞–¥–∞—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.
  static const _logOptions = LogOptions(
    printColors: false,
    messageFormatting: _formatLoggerMessage,
  );

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
  static String _formatLoggerMessage(LogMessage message) =>
      '${message.level.emoji} ${message.timestamp} | $message';

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞, —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å—Ç–µ–∫–∞ –≤—ã–∑–æ–≤–æ–≤.
  static String _formatError(
    String type,
    String error,
    StackTrace? stackTrace,
  ) {
    final trace = stackTrace ?? StackTrace.current;

    final buffer =
        StringBuffer(type)
          ..write(' error: ')
          ..writeln(error)
          ..writeln('Stack trace:')
          ..write(Trace.from(trace).terse); // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤

    return buffer.toString();
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–π–º–∞–Ω–Ω—ã—Ö –≤ `runZoned`).
  static void logZoneError(Object? e, StackTrace s) {
    l.e(_formatError('Top-level', e.toString(), s), s);
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫, –ø–æ–π–º–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ Flutter.
  static void logFlutterError(FlutterErrorDetails details) {
    final stack = details.stack;
    l.e(_formatError('Flutter', details.exceptionAsString(), stack), stack);
  }

  /// –ó–∞–ø—É—Å–∫ –∫–æ–¥–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
  ///
  /// –í—Å–µ –æ—à–∏–±–∫–∏ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –≤–æ–∑–Ω–∏–∫—à–∏–µ –≤ `body`, –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ª–æ–≥–µ—Ä–æ–º `l`.
  static T runLogging<T>(T Function() body) => l.capture(body, _logOptions);
}
